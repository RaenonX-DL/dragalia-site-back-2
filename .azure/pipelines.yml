# Required pipeline level variables:
# - `CODACY_PROJECT_TOKEN`: For reporting Codacy coverage.

pool:
  vmImage: ubuntu-latest

variables:
  - template: variables/main.yml
  - template: variables/checkout-and-cache.yml

stages:
- stage: Lint

  jobs:
  - job: Lint

    steps:
    - template: templates/checkout-and-cache.yml

    - script: npm run lint
      displayName: 'Lint TypeScript'

- stage: Build

  dependsOn:
  - Lint

  jobs:
  - job: Build

    steps:
    - template: templates/checkout-and-cache.yml

    - task: Cache@2
      displayName: 'Cache Built Source'
      inputs:
        key: 'build | "$(Agent.OS)" | "$(Build.BuildNumber)"'
        path: '$(Pipeline.Workspace)/s'

    - script: npm run build
      displayName: 'Build App'
      env:
        NODE_ENV: production

- stage: Test

  dependsOn:
  - Build

  jobs:
  - job: Jest
    displayName: 'Run Jest Tests / Coverage'

    steps:
    - template: templates/checkout-and-cache.yml

    - script: npm run test:ci-jest
      displayName: 'Run jest Tests'
      env:
        NODE_OPTIONS: --max_old_space_size=16384

    - script: >
        bash <(curl -Ls https://coverage.codacy.com/get.sh) report
        -r clover.xml
        -t $(CODACY_PROJECT_TOKEN)
      displayName: 'Upload Coverage (Codacy)'
      condition: succeededOrFailed()
      env:
        CODACY_PROJECT_TOKEN: $(variables.CODACY_PROJECT_TOKEN)

    - task: PublishCodeCoverageResults@1
      displayName: 'Upload Coverage (Azure)'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'cobertura-coverage.xml'
        failIfCoverageEmpty: true

    - task: PublishTestResults@2
      displayName: 'Upload Test Results (Azure)'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        searchFolder: '$(Pipeline.Workspace)/s'
        failTaskOnFailedTests: true
        testRunTitle: 'Jest Tests'

- stage: Deploy

  dependsOn:
  - Test

  jobs:
  - job: Deploy

    steps:
    - template: templates/checkout-and-cache.yml

    - task: Cache@2
      displayName: 'Cache Built Source'
      inputs:
        key: 'build | "$(Agent.OS)" | "$(Build.BuildNumber)"'
        path: '$(Pipeline.Workspace)/s'

    - task: ArchiveFiles@2
      displayName: 'Archive Build Artifacts'

      inputs:
        rootFolderOrFile: '.'
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/dragalia-site-back.tar.gz'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'

      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/dragalia-site-back.tar.gz'
        ArtifactName: 'dragalia-site-back-artifact'
        publishLocation: 'Container'
